AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Gales Fuel Sales Export Service

Parameters:
  ParamBillTo:
    Description: Required. Value of Tag key BillTo
    Type: String
    Default: "Gales"
  ParamCertificateArn:
    Description: Domain Certificate Arn
    Type: String
  ParamCustomDomainName:
    Description: Custom Domain Name
    Type: String
  ParamENV:
    Description: Stage environment
    Type: String
  ParamHostedZoneId:
    Description: Hosted Zone ID
    Type: String
  ParamProjectName:
    Description: Project name
    Type: String
  ParamSSMPath:
    Description: SSM Params path
    Type: String
  ParamSecurityGroupIds:
    Description: SecurityGroupIds
    ConstraintDescription: 'must be list of EC2 security group ids'
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  ParamSubnetIds:
    Description: SecurityGroupIds
    ConstraintDescription: 'must be list of EC2 subnet ids'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ParamUserPoolArn:
    Description: Cognito User Pool Arn
    Type: String

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    DependsOn: Lambda
    Properties:
      StageName: Prod
      EndpointConfiguration: 
        Type: REGIONAL
      
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            UserPoolArn: !Ref ParamUserPoolArn
            # Identity:
              # ReauthorizeEvery: 300
              # ReauthorizeEvery: 1 # for testing

      # Documentation for below: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#gateway-response-object
      # Oddly, this property does not work with sam local
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"

      # Docs for this at: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#domain-configuration-object
      Domain:
        DomainName: !Ref ParamCustomDomainName
        CertificateArn: !Ref ParamCertificateArn
        EndpointConfiguration: "REGIONAL"
        Route53:
          HostedZoneId: !Ref ParamHostedZoneId
          EvaluateTargetHealth: true
          DistributionDomainName:
            Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      CodeUri: ./dist
      Handler: /export
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          Stage: !Ref ParamENV
      VpcConfig:
        SecurityGroupIds: !Ref ParamSecurityGroupIds
        SubnetIds: !Ref ParamSubnetIds
      Tags:
        BillTo: !Ref ParamBillTo
      Events:
        Ping:
          Type: Api
          Properties:
            Path: /export
            Method: GET
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: NONE
        Create:
          Type: Api
          Properties:
            Path: /export
            Method: POST
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: LambdaTokenAuthorizer
        Options:
          Type: Api
          Properties:
            Path: /export
            Method: OPTIONS
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: NONE

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource: 
              Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/GDS_*"
      - PolicyName: FunctionLambdaVPCAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Resource: '*'
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter*
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParamENV}/${ParamSSMPath}*
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'

Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: RestApi
  ApiEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiArn:
    Description: "API ARN"
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/"
  ApiFQDN:
    Description: "API Domain Name"
    Value: !Ref ParamCustomDomainName
  ApiURL:
    Description: "API Url"
    Value: !Sub "https://${ParamCustomDomainName}/export"
  LambdaArn:
    Description: "Lambda ARN"
    Value: !GetAtt Lambda.Arn
  LambdaRoleArn:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn